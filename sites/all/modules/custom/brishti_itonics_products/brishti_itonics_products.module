<?php

/**
 * Define hook_permission() for users.
 */
function brishti_itonics_products_permission() {

  $permission = array(
    'administer itonics products' => array(
      'title'       => t('Administer ITONICS products'),
      'description' => t('Perform administration tasks for ITONICS products.'),
    ),
    'view itonics products' => array(
      'title'       => t('View ITONICS products'),
      'description' => t('View ITONICS products listings and details.'),
    ),
  );

  return $permission;
}

/**
 * Define hook_menu() for users.
 */
function brishti_itonics_products_menu() {

  $items = array();

  // List product
    $items['itonics-products'] = array(
      'title'            => 'Itonics Products',
      'description'      => 'View ITONICS Products',
      'page callback'    => 'brishti_itonics_products_list',
      'page arguments'   => array(3),
      'access arguments' => array('view itonics products'),
      'type'             => MENU_NORMAL_ITEM,
    );

  // Add product
    $items['itonics-products/add'] = array(
      'title'            => 'Add Itonics Product',
      'description'      => 'Add a new ITONICS product',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('brishti_itonics_products_form'),
      'access arguments' => array('administer itonics products'),
      'type'             => MENU_NORMAL_ITEM,
      'weight'           => 1,
    );

  // Edit product
    $items['itonics-products/%/edit'] = array(
      'title'            => 'Edit Product',
      'description'      => 'Edit an existing ITONICS product',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('brishti_itonics_products_form', 1),
      'access arguments' => array('administer itonics products'),
      'type'             => MENU_CALLBACK,
    );

  // View product
    $items['itonics-products/%'] = array(
      'title callback'   => 'brishti_itonics_products_get_title',
      'title arguments'  => array(1),
      'page callback'    => 'brishti_itonics_products_view',
      'page arguments'   => array(1),
      'access arguments' => array('view itonics products'),
      'type'             => MENU_CALLBACK,
    );

  // Delete product
    $items['itonics-products/%/delete'] = array(
      'title'            => 'Delete Product',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('brishti_itonics_products_delete_form', 1),
      'access arguments' => array('administer itonics products'),
      'type'             => MENU_CALLBACK,
    );

  return $items;
}

/**
 * Get product title.
 */
function brishti_itonics_products_get_title($pid) {
  $product = db_query("SELECT title FROM {brishti_itonics_products} WHERE id = :pid", array(':pid' => $pid))->fetchField();

  return $product ? $product : t('Product not found');
}

/**
 * Create/edit product form.
 */
function brishti_itonics_products_form($form, &$form_state, $pid = NULL) {
  $product = NULL;

  if ($pid && is_numeric($pid)) {
    $product = db_query("SELECT * FROM {brishti_itonics_products} WHERE id = :pid", array(':pid' => $pid))->fetchObject();

    if (!$product) {
      drupal_not_found();
      return;
    }
    $form['id'] = array(
      '#type'  => 'value',
      '#value' => $pid,
    );
  }

  $form['title'] = array(
    '#title'         => t('Title'),
    '#type'          => 'textfield',
    '#required'      => TRUE,
    '#default_value' => $product ? $product->title : '',
  );

  $form['image'] = array(
    '#title'       => t('Image'),
    '#type'        => 'file',
    '#description' => t('Upload a product image.'),
  );

  if ($product && $product->image) {
    $form['current_image'] = array(
      '#type'       => 'container',
      '#attributes' => array('class' => array('current-product-image')),
      'image'       => array(
        '#theme'      => 'image',
        '#path'       => $product->image,
        '#alt'        => $product->title,
        '#attributes' => array(
          'style'     => 'width: 100px; height: auto; margin: 10px 0;'
        ),
      ),
    );
  }

  $form['summary'] = array(
    '#title'         => t('Summary'),
    '#type'          => 'textarea',
    '#default_value' => $product ? $product->summary : '',
  );

  $form['description'] = array(
    '#title'         => t('Description'),
    '#type'          => 'text_format',
    '#format'        => 'full_html',
    '#default_value' => $product ? $product->description : '',
  );

  $categories = variable_get('brishti_itonics_product_categories', array());
  $form['category'] = array(
    '#title'         => t('Category'),
    '#type'          => 'select',
    '#options'       => $categories,
    '#multiple'      => TRUE,
    '#required'      => TRUE,
    '#default_value' => $product ? unserialize($product->category) : array(),
    '#attributes'    => array('class' => array('multiselect')),
  );

  $types = variable_get('brishti_itonics_product_types', array());
  $form['type'] = array(
    '#title'         => t('Type'),
    '#type'          => 'radios',
    '#options'       => $types,
    '#required'      => TRUE,
    '#default_value' => $product ? $product->type : '',
  );

  $form['owner_email'] = array(
    '#title'         => t('Owner Email'),
    '#type'          => 'textfield',
    '#required'      => TRUE,
    '#default_value' => $product ? $product->owner_email : '',
  );

  $form['expiry_date'] = array(
    '#title'               => t('Expiry Date'),
    '#type'                => 'date_popup',
    '#date_format'         => 'Y-m-d',
    '#date_label_position' => 'none',
    '#default_value'       => $product ? date('Y-m-d', $product->expiry_date) : '',
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => $product ? t('Update Product') : t('Create Product'),
  );

  // Attach required libraries
    $form['#attached'] = array(
      'js'      => array(
        array(
          'data' => drupal_get_path('module', 'brishti_itonics_products') . '/js/brishti_itonics_products.js',
          'type' => 'file',
        ),
      ),
      'css'     => array(),
      'library' => array(
        array('system', 'ui'),
        array('system', 'ui.core'),
        array('system', 'ui.widget'),
        array('system', 'ui.button'),
        array('system', 'ui.datepicker'),
        array('system', 'ui.multiselect'),
      ),
    );

      if ($library = libraries_get_path('jquery-ui-multiselect')) {
        $form['#attached']['js'][] = array(
          'data'   => $library . '/jquery.multiselect.js',
          'type'   => 'file',
          'weight' => 5,
          'group'  => JS_LIBRARY,
        );
        $form['#attached']['css'][] = array(
          'data' => $library . '/jquery.multiselect.css',
          'type' => 'file',
        );
      }

  return $form;
}

/**
 * Form validation for brishti_itonics_products_form().
 */
function brishti_itonics_products_form_validate($form, &$form_state) {
  $required_fields = ['title', 'category', 'type', 'owner_email'];

  foreach ($required_fields as $field) {
    if (empty($form_state['values'][$field])) {
      form_set_error($field, t('@name field is required.', array('!name' => ucfirst($field))));
    }
  }
  // Validate email
    if (!valid_email_address($form_state['values']['owner_email'])) {
      form_set_error('owner_email', t('Please enter a valid email address.'));
    }

  // Handle file upload
    $file = file_save_upload('image', array(
      'file_validate_is_image'   => array(),
      'file_validate_extensions' => array('png gif jpg jpeg'),
    ));

    if ($file) {
      if ($file = file_move($file, 'public://')) {
        $form_state['values']['image'] = $file->uri;
      } else {
        form_set_error('image', t('Failed to store the uploaded file.'));
      }
    }

    //Validate expiry date
      if (!empty($form_state['values']['expiry_date'])) {
        $expiry_timestamp = strtotime($form_state['values']['expiry_date']);
        if ($expiry_timestamp < strtotime('today')) {
          form_set_error('expiry_date', t('Expiry date cannot be in the past.'));
        }
      }
}

/**
 * Form submission for brishti_itonics_products_form().
 */
function brishti_itonics_products_form_submit($form, &$form_state) {
  $description = htmlspecialchars($form_state['values']['description']['value'], ENT_QUOTES | ENT_HTML5, 'utf-8');

  $product = array(
    'title'       => $form_state['values']['title'],
    'summary'     => $form_state['values']['summary'],
    'description' => $description,
    'category'    => serialize($form_state['values']['category']),
    'type'        => $form_state['values']['type'],
    'owner_email' => $form_state['values']['owner_email'],
    'expiry_date' => strtotime($form_state['values']['expiry_date']),
    'updated'     => time(),
  );

  if ($form_state['values']['image']) {
    $product['image'] = $form_state['values']['image'];
  } elseif (!empty($form_state['values']['id']) && !$form_state['values']['image']) {
    $product_detail = db_query("SELECT * FROM {brishti_itonics_products} WHERE id = :pid",
    array(':pid' => $form_state['values']['id']))->fetchObject();

    if ($product_detail->image) {
      $product['image'] = $product_detail->image;
    }
  }

  if (!empty($form_state['values']['id'])) { // Update existing product
    $product['id'] = $form_state['values']['id'];

    drupal_write_record('brishti_itonics_products', $product, 'id');
    drupal_set_message(t('Product has been updated.'));
  } else { // Create new product
    $product['created'] = time();

    drupal_write_record('brishti_itonics_products', $product);
    drupal_set_message(t('Product has been added.'));
  }

  $form_state['redirect'] = 'itonics-products';
}

/**
 * Display product details.
 */
function brishti_itonics_products_view($pid) {
  $product = db_query("SELECT * FROM {brishti_itonics_products} WHERE id = :pid", array(':pid' => $pid))->fetchObject();

  if (!$product) {
    return drupal_not_found();
  }

  $selected_product_categories = unserialize($product->category);
  $categories = variable_get('brishti_itonics_product_categories', array());

  $product_categories = array();
  foreach ($selected_product_categories as $key=>$category) {
    if (isset($categories[$key])) {
      $product_categories[] = $categories[$key];
    }
  }
  $selected_category = !empty($product_categories) ? implode(', ', $product_categories) : t('None');

  $types = variable_get('brishti_itonics_product_types', array());

  $build = array();

  if ($product->image) {
    $build['image'] = array(
      '#theme'      => 'image',
      '#path'       => $product->image,
      '#alt'        => $product->title,
      '#attributes' => array('style' => 'width: 100px; height: 100px;')
    );
  }

  $build['details'] = array(
    '#theme' => 'table',
    '#rows'  => array(
      array(t('Title'), $product->title),
      array(t('Summary'), $product->summary),
      array(t('Description'), array('data' => array('#markup' => $product->description))),
      array(t('Category'), $selected_category),
      array(t('Type'), $types[$product->type]),
      array(t('Owner Email'), $product->owner_email),
      array(t('Expiry Date'), format_date($product->expiry_date, 'custom', 'Y-m-d')),
      array(t('Created'), format_date($product->created, 'short')),
      array(t('Updated'), format_date($product->updated, 'short')),
    ),
  );

  return $build;
}

/**
 * Delete product and Confirmation form.
 */
function brishti_itonics_products_delete_form($form, &$form_state, $pid) {
  $form['id'] = array(
    '#type'  => 'value',
    '#value' => $pid,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to delete this product?'),
    'itonics-products',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Form submission for brishti_itonics_products_delete_form().
 */
function brishti_itonics_products_delete_form_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    db_delete('brishti_itonics_products')
              ->condition('id', $form_state['values']['id'])
              ->execute();

    drupal_set_message(t('Product has been deleted.'));
  }

  $form_state['redirect'] = 'itonics-products';
}

/**
 * Lists all products.
 */
function brishti_itonics_products_list() {
  $header = array(
    array('data' => t('Image'), 'field' => 'image'),
    array('data' => t('Title'), 'field' => 'title'),
    array('data' => t('Type'), 'field' => 'type'),
    array('data' => t('Owner Email'), 'field' => 'owner_email'),
    array('data' => t('Expiry Date'), 'field' => 'expiry_date')
  );

  //check if user has administer itonics products permission
    if (user_access('administer itonics products')) {
      $header[] = array('data' => t('Operations'), 'colspan' => 3);
    } else {
      $header[] = array('data' => t('Operations'), 'colspan' => 1);
    }

  $query = db_select('brishti_itonics_products', 'p')
                    ->fields('p', array('id', 'image', 'title', 'type', 'owner_email', 'expiry_date'))
                    ->orderBy('id', 'desc');

  $result = $query
            ->extend('TableSort')
            ->extend('PagerDefault')
            ->limit(10)
            ->orderByHeader($header)
            ->execute();

  $rows = array();
  foreach ($result as $product) {
    $image = t('');

    if ($product->image) {
      $img_path = file_create_url($product->image);

      $image = theme('image', array(
        'path'       => $img_path,
        'alt'        => $product->title,
        'attributes' => array('style' => 'width: 100px; height: 100px;')
      ));
    }

    $row = array(
      'data' => array(
        $image,
        user_access('administer itonics products')
        ? l($product->title, "itonics-products/$product->id")
        : l($product->title, "itonics-products/$product->id"),
        $product->type,
        $product->owner_email,
        format_date($product->expiry_date, 'custom', 'Y-m-d')
      ),
    );

    //additional for administer itonics products user
      if (user_access('administer itonics products')) {
        $row['data'][] =  l(t('View'), "itonics-products/$product->id");
        $row['data'][] =  l(t('Edit'), "itonics-products/$product->id/edit");
        $row['data'][] =  l(t('Delete'), "itonics-products/$product->id/delete");
      } else {
        $row['data'][] =  l(t('View'), "itonics-products/$product->id");
      }

    $rows[] = $row;
  }

  $build['product_table'] = array(
    '#theme'  => 'table',
    '#header' => $header,
    '#rows'   => $rows,
    '#empty'  => t('No products available.'),
  );

  $build['product_pager'] = array('#theme' => 'pager');

  return $build;
}
